# Directory: ``

## File: `playerap.txt`
```

```

## File: `concatfiles.py`
```
import os
import sys

def append_contents(output_file, path, indent=""):
    """
    Recursively appends the contents of all files and directories in the given path 
    to the output file, formatted in Markdown.

    :param output_file: File object for the output file.
    :param path: Current directory or file path.
    :param indent: Indentation for Markdown formatting.
    """
    if os.path.isdir(path):
        # Write directory name
        directory_name = os.path.basename(path)
        ignore = ['git', 'zillow_html', 'venv', 'pycache']
        for d in ignore:
            if d in directory_name:
                return
        output_file.write(f"{indent}# Directory: `{directory_name}`\n\n")

        for filename in os.listdir(path):
            file_path = os.path.join(path, filename)
            # Recursively append contents of files and directories
            append_contents(output_file, file_path, indent + "#")
        output_file.write(f"{indent}# End of Directory `{directory_name}`\n\n")
    elif os.path.isfile(path):
        # Write file name and contents
        file_name = os.path.basename(path)
        print(file_name)
        ignore = ["DS_Store", "sql", ".ico", ".svg", ".eot"]
        for f in ignore:
            if f in file_name:
                return
        output_file.write(f"{indent}# File: `{file_name}`\n")
        output_file.write(f"```\n")

        with open(path, 'r') as infile:
            contents = infile.read()
        output_file.write(contents)
        output_file.write(f"\n```\n\n")

def append_files_in_directory(directory_path, output_file):
    """
    Appends the contents of all files and directories in the given directory 
    to a single file, preceded by the file or directory name in Markdown format.

    :param directory_path: Path to the directory containing files and directories.
    :param output_file: Path to the output file.
    """
    with open(output_file, 'w') as outfile:
        append_contents(outfile, directory_path)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py [directory_path] [output_file]")
        sys.exit(1)

    directory_path = sys.argv[1]
    output_file = sys.argv[2]
    append_files_in_directory(directory_path, output_file)

```

## File: `codecs.txt`
```
Codecs:
 D..... = Decoding supported
 .E.... = Encoding supported
 ..V... = Video codec
 ..A... = Audio codec
 ..S... = Subtitle codec
 ...I.. = Intra frame-only codec
 ....L. = Lossy compression
 .....S = Lossless compression
 -------
 D.VI.S 012v                 Uncompressed 4:2:2 10-bit
 D.V.L. 4xm                  4X Movie
 D.VI.S 8bps                 QuickTime 8BPS video
 .EVIL. a64_multi            Multicolor charset for Commodore 64 (encoders: a64multi )
 .EVIL. a64_multi5           Multicolor charset for Commodore 64, extended with 5th color (colram) (encoders: a64multi5 )
 D.V..S aasc                 Autodesk RLE
 D.V.L. agm                  Amuse Graphics Movie
 D.VIL. aic                  Apple Intermediate Codec
 DEVI.S alias_pix            Alias/Wavefront PIX image
 DEVIL. amv                  AMV Video
 D.V.L. anm                  Deluxe Paint Animation
 D.V.L. ansi                 ASCII/ANSI art
 DEV..S apng                 APNG (Animated Portable Network Graphics) image
 D.V.L. arbc                 Gryphon's Anim Compressor
 D.V.L. argo                 Argonaut Games Video
 DEVIL. asv1                 ASUS V1
 DEVIL. asv2                 ASUS V2
 D.VIL. aura                 Auravision AURA
 D.VIL. aura2                Auravision Aura 2
 DEV.L. av1                  Alliance for Open Media AV1 (decoders: libdav1d libaom-av1 av1 av1_cuvid ) (encoders: libaom-av1 )
 D.V... avrn                 Avid AVI Codec
 DEVI.S avrp                 Avid 1:1 10-bit RGB Packer
 D.V.L. avs                  AVS (Audio Video Standard) video
 ..V.L. avs2                 AVS2-P2/IEEE1857.4
 ..V.L. avs3                 AVS3-P2/IEEE1857.10
 DEVI.S avui                 Avid Meridien Uncompressed
 DEVI.S ayuv                 Uncompressed packed MS 4:4:4:4
 D.V.L. bethsoftvid          Bethesda VID video
 D.V.L. bfi                  Brute Force & Ignorance
 D.V.L. binkvideo            Bink video
 D.VI.. bintext              Binary text
 D.VI.S bitpacked            Bitpacked
 DEVI.S bmp                  BMP (Windows and OS/2 bitmap)
 D.V..S bmv_video            Discworld II BMV video
 D.VI.S brender_pix          BRender PIX image
 D.V.L. c93                  Interplay C93
 D.V.L. cavs                 Chinese AVS (Audio Video Standard) (AVS1-P2, JiZhun profile)
 D.V.L. cdgraphics           CD Graphics video
 D.V..S cdtoons              CDToons video
 D.VIL. cdxl                 Commodore CDXL video
 DEV.L. cfhd                 GoPro CineForm HD
 DEV.L. cinepak              Cinepak
 D.V.L. clearvideo           Iterated Systems ClearVideo
 DEVIL. cljr                 Cirrus Logic AccuPak
 D.VI.S cllc                 Canopus Lossless Codec
 D.V.L. cmv                  Electronic Arts CMV video (decoders: eacmv )
 D.V... cpia                 CPiA video format
 D.VILS cri                  Cintel RAW
 D.V..S cscd                 CamStudio (decoders: camstudio )
 D.VIL. cyuv                 Creative YUV (CYUV)
 ..V.LS daala                Daala
 D.VILS dds                  DirectDraw Surface image decoder
 D.V.L. dfa                  Chronomaster DFA
 DEV.LS dirac                Dirac (encoders: vc2 )
 DEVIL. dnxhd                VC3/DNxHD
 DEVI.S dpx                  DPX (Digital Picture Exchange) image
 D.V.L. dsicinvideo          Delphine Software International CIN video
 DEVIL. dvvideo              DV (Digital Video)
 D.V..S dxa                  Feeble Files/ScummVM DXA
 D.VI.S dxtory               Dxtory
 D.VIL. dxv                  Resolume DXV
 D.V.L. escape124            Escape 124
 D.V.L. escape130            Escape 130
 DEVILS exr                  OpenEXR image
 DEV..S ffv1                 FFmpeg video codec #1
 DEVI.S ffvhuff              Huffyuv FFmpeg variant
 D.V.L. fic                  Mirillis FIC
 DEVI.S fits                 FITS (Flexible Image Transport System)
 DEV..S flashsv              Flash Screen Video v1
 DEV.L. flashsv2             Flash Screen Video v2
 D.V..S flic                 Autodesk Animator Flic video
 DEV.L. flv1                 FLV / Sorenson Spark / Sorenson H.263 (Flash Video) (decoders: flv ) (encoders: flv )
 D.V..S fmvc                 FM Screen Capture Codec
 D.VI.S fraps                Fraps
 D.VI.S frwu                 Forward Uncompressed
 D.V.L. g2m                  Go2Meeting
 D.V.L. gdv                  Gremlin Digital Video
 DEV..S gif                  CompuServe GIF (Graphics Interchange Format)
 DEV.L. h261                 H.261
 DEV.L. h263                 H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version 2 (decoders: h263 h263_v4l2m2m ) (encoders: h263 h263_v4l2m2m )
 D.V.L. h263i                Intel H.263
 DEV.L. h263p                H.263+ / H.263-1998 / H.263 version 2
 DEV.LS h264                 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 (decoders: h264 h264_v4l2m2m h264_cuvid ) (encoders: libx264 libx264rgb h264_nvenc h264_omx h264_v4l2m2m h264_vaapi nvenc nvenc_h264 )
 DEVIL. hap                  Vidvox Hap
 DEV.L. hevc                 H.265 / HEVC (High Efficiency Video Coding) (decoders: hevc hevc_v4l2m2m hevc_cuvid ) (encoders: libx265 nvenc_hevc hevc_nvenc hevc_v4l2m2m hevc_vaapi )
 D.V.L. hnm4video            HNM 4 video
 D.VIL. hq_hqa               Canopus HQ/HQA
 D.VIL. hqx                  Canopus HQX
 DEVI.S huffyuv              HuffYUV
 D.VI.S hymt                 HuffYUV MT
 D.V.L. idcin                id Quake II CIN video (decoders: idcinvideo )
 D.VI.. idf                  iCEDraw text
 D.V.L. iff_ilbm             IFF ACBM/ANIM/DEEP/ILBM/PBM/RGB8/RGBN (decoders: iff )
 D.V.L. imm4                 Infinity IMM4
 D.V.L. imm5                 Infinity IMM5
 D.V.L. indeo2               Intel Indeo 2
 D.V.L. indeo3               Intel Indeo 3
 D.V.L. indeo4               Intel Indeo Video Interactive 4
 D.V.L. indeo5               Intel Indeo Video Interactive 5
 D.V.L. interplayvideo       Interplay MVE video
 D.VIL. ipu                  IPU Video
 DEVILS jpeg2000             JPEG 2000 (decoders: jpeg2000 libopenjpeg ) (encoders: jpeg2000 libopenjpeg )
 DEVILS jpegls               JPEG-LS
 D.VIL. jv                   Bitmap Brothers JV video
 D.V.L. kgv1                 Kega Game Video
 D.V.L. kmvc                 Karl Morton's video codec
 D.VI.S lagarith             Lagarith lossless
 .EVI.S ljpeg                Lossless JPEG
 D.VI.S loco                 LOCO
 D.V.L. lscr                 LEAD Screen Capture
 D.VI.S m101                 Matrox Uncompressed SD
 D.V.L. mad                  Electronic Arts Madcow Video (decoders: eamad )
 DEVI.S magicyuv             MagicYUV video
 D.VIL. mdec                 Sony PlayStation MDEC (Motion DECoder)
 D.V.L. mimic                Mimic
 DEVIL. mjpeg                Motion JPEG (decoders: mjpeg mjpeg_cuvid ) (encoders: mjpeg mjpeg_vaapi )
 D.VIL. mjpegb               Apple MJPEG-B
 D.V.L. mmvideo              American Laser Games MM Video
 D.V.L. mobiclip             MobiClip Video
 D.V.L. motionpixels         Motion Pixels video
 DEV.L. mpeg1video           MPEG-1 video (decoders: mpeg1video mpeg1_v4l2m2m mpeg1_cuvid )
 DEV.L. mpeg2video           MPEG-2 video (decoders: mpeg2video mpegvideo mpeg2_v4l2m2m mpeg2_cuvid ) (encoders: mpeg2video mpeg2_vaapi )
 DEV.L. mpeg4                MPEG-4 part 2 (decoders: mpeg4 mpeg4_v4l2m2m mpeg4_cuvid ) (encoders: mpeg4 libxvid mpeg4_omx mpeg4_v4l2m2m )
 D.V.L. msa1                 MS ATC Screen
 D.VI.S mscc                 Mandsoft Screen Capture Codec
 D.V.L. msmpeg4v1            MPEG-4 part 2 Microsoft variant version 1
 DEV.L. msmpeg4v2            MPEG-4 part 2 Microsoft variant version 2
 DEV.L. msmpeg4v3            MPEG-4 part 2 Microsoft variant version 3 (decoders: msmpeg4 ) (encoders: msmpeg4 )
 D.VI.S msp2                 Microsoft Paint (MSP) version 2
 D.V..S msrle                Microsoft RLE
 D.V.L. mss1                 MS Screen 1
 D.VIL. mss2                 MS Windows Media Video V9 Screen
 DEV.L. msvideo1             Microsoft Video 1
 D.VI.S mszh                 LCL (LossLess Codec Library) MSZH
 D.V.L. mts2                 MS Expression Encoder Screen
 D.V.L. mv30                 MidiVid 3.0
 D.VIL. mvc1                 Silicon Graphics Motion Video Compressor 1
 D.VIL. mvc2                 Silicon Graphics Motion Video Compressor 2
 D.V.L. mvdv                 MidiVid VQ
 D.VIL. mvha                 MidiVid Archive Codec
 D.V..S mwsc                 MatchWare Screen Capture Codec
 D.V.L. mxpeg                Mobotix MxPEG video
 D.VIL. notchlc              NotchLC
 D.V.L. nuv                  NuppelVideo/RTJPEG
 D.V.L. paf_video            Amazing Studio Packed Animation File Video
 DEVI.S pam                  PAM (Portable AnyMap) image
 DEVI.S pbm                  PBM (Portable BitMap) image
 DEVI.S pcx                  PC Paintbrush PCX image
 DEVI.S pfm                  PFM (Portable FloatMap) image
 DEVI.S pgm                  PGM (Portable GrayMap) image
 DEVI.S pgmyuv               PGMYUV (Portable GrayMap YUV) image
 D.VI.S pgx                  PGX (JPEG2000 Test Format)
 D.V.L. photocd              Kodak Photo CD
 D.VIL. pictor               Pictor/PC Paint
 D.VIL. pixlet               Apple Pixlet
 DEV..S png                  PNG (Portable Network Graphics) image
 DEVI.S ppm                  PPM (Portable PixelMap) image
 DEVIL. prores               Apple ProRes (iCodec Pro) (encoders: prores prores_aw prores_ks )
 D.VIL. prosumer             Brooktree ProSumer Video
 D.VI.S psd                  Photoshop PSD file
 D.VIL. ptx                  V.Flash PTX image
 D.VI.S qdraw                Apple QuickDraw
 D.V.L. qpeg                 Q-team QPEG
 DEV..S qtrle                QuickTime Animation (RLE) video
 DEVI.S r10k                 AJA Kona 10-bit RGB Codec
 DEVI.S r210                 Uncompressed RGB 10-bit
 D.V.L. rasc                 RemotelyAnywhere Screen Capture
 DEVI.S rawvideo             raw video
 D.VIL. rl2                  RL2 video
 DEV.L. roq                  id RoQ video (decoders: roqvideo ) (encoders: roqvideo )
 DEV.L. rpza                 QuickTime video (RPZA)
 D.V..S rscc                 innoHeim/Rsupport Screen Capture Codec
 DEV.L. rv10                 RealVideo 1.0
 DEV.L. rv20                 RealVideo 2.0
 D.V.L. rv30                 RealVideo 3.0
 D.V.L. rv40                 RealVideo 4.0
 D.V.L. sanm                 LucasArts SANM/SMUSH video
 D.V.LS scpr                 ScreenPressor
 D.V..S screenpresso         Screenpresso
 D.V.L. sga                  Digital Pictures SGA Video
 DEVI.S sgi                  SGI image
 D.VI.S sgirle               SGI RLE 8-bit
 D.VI.S sheervideo           BitJazz SheerVideo
 D.V.L. simbiosis_imx        Simbiosis Interactive IMX Video
 D.V.L. smackvideo           Smacker video (decoders: smackvid )
 D.V.L. smc                  QuickTime Graphics (SMC)
 D.VIL. smvjpeg              Sigmatel Motion Video
 DEV.LS snow                 Snow
 D.VIL. sp5x                 Sunplus JPEG (SP5X)
 DEVIL. speedhq              NewTek SpeedHQ
 D.VI.S srgc                 Screen Recorder Gold Codec
 DEVI.S sunrast              Sun Rasterfile image
 D.V..S svg                  Scalable Vector Graphics (decoders: librsvg )
 DEV.L. svq1                 Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1
 D.V.L. svq3                 Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3
 DEVI.S targa                Truevision Targa image
 D.VI.S targa_y216           Pinnacle TARGA CineWave YUV16
 D.V.L. tdsc                 TDSC
 D.V.L. tgq                  Electronic Arts TGQ video (decoders: eatgq )
 D.V.L. tgv                  Electronic Arts TGV video (decoders: eatgv )
 DEV.L. theora               Theora (encoders: libtheora )
 D.VIL. thp                  Nintendo Gamecube THP video
 D.V.L. tiertexseqvideo      Tiertex Limited SEQ video
 DEVI.S tiff                 TIFF image
 D.VIL. tmv                  8088flex TMV
 D.V.L. tqi                  Electronic Arts TQI video (decoders: eatqi )
 D.V.L. truemotion1          Duck TrueMotion 1.0
 D.V.L. truemotion2          Duck TrueMotion 2.0
 D.VIL. truemotion2rt        Duck TrueMotion 2.0 Real Time
 D.V..S tscc                 TechSmith Screen Capture Codec (decoders: camtasia )
 D.V.L. tscc2                TechSmith Screen Codec 2
 D.VIL. txd                  Renderware TXD (TeXture Dictionary) image
 D.V.L. ulti                 IBM UltiMotion (decoders: ultimotion )
 DEVI.S utvideo              Ut Video
 DEVI.S v210                 Uncompressed 4:2:2 10-bit
 D.VI.S v210x                Uncompressed 4:2:2 10-bit
 DEVI.S v308                 Uncompressed packed 4:4:4
 DEVI.S v408                 Uncompressed packed QT 4:4:4:4
 DEVI.S v410                 Uncompressed 4:4:4 10-bit
 D.V.L. vb                   Beam Software VB
 D.VI.S vble                 VBLE Lossless Codec
 D.V.L. vc1                  SMPTE VC-1 (decoders: vc1 vc1_v4l2m2m vc1_cuvid )
 D.V.L. vc1image             Windows Media Video 9 Image v2
 D.VIL. vcr1                 ATI VCR1
 D.VIL. vixl                 Miro VideoXL (decoders: xl )
 D.V.L. vmdvideo             Sierra VMD video
 D.V..S vmnc                 VMware Screen Codec / VMware Video
 D.V.L. vp3                  On2 VP3
 D.V.L. vp4                  On2 VP4
 D.V.L. vp5                  On2 VP5
 D.V.L. vp6                  On2 VP6
 D.V.L. vp6a                 On2 VP6 (Flash version, with alpha channel)
 D.V.L. vp6f                 On2 VP6 (Flash version)
 D.V.L. vp7                  On2 VP7
 DEV.L. vp8                  On2 VP8 (decoders: vp8 vp8_v4l2m2m libvpx vp8_cuvid ) (encoders: libvpx vp8_v4l2m2m vp8_vaapi )
 DEV.L. vp9                  Google VP9 (decoders: vp9 vp9_v4l2m2m libvpx-vp9 vp9_cuvid ) (encoders: libvpx-vp9 vp9_vaapi )
 ..V.L. vvc                  H.266 / VVC (Versatile Video Coding)
 D.V..S wcmv                 WinCAM Motion Video
 DEVILS webp                 WebP (encoders: libwebp_anim libwebp )
 DEV.L. wmv1                 Windows Media Video 7
 DEV.L. wmv2                 Windows Media Video 8
 D.V.L. wmv3                 Windows Media Video 9
 D.V.L. wmv3image            Windows Media Video 9 Image
 D.VIL. wnv1                 Winnov WNV1
 DEV..S wrapped_avframe      AVFrame to AVPacket passthrough
 D.V.L. ws_vqa               Westwood Studios VQA (Vector Quantized Animation) video (decoders: vqavideo )
 D.V.L. xan_wc3              Wing Commander III / Xan
 D.V.L. xan_wc4              Wing Commander IV / Xxan
 D.VI.. xbin                 eXtended BINary text
 DEVI.S xbm                  XBM (X BitMap) image
 DEVIL. xface                X-face image
 D.VI.S xpm                  XPM (X PixMap) image
 DEVI.S xwd                  XWD (X Window Dump) image
 DEVI.S y41p                 Uncompressed YUV 4:1:1 12-bit
 D.VI.S ylc                  YUY2 Lossless Codec
 D.V.L. yop                  Psygnosis YOP Video
 DEVI.S yuv4                 Uncompressed packed 4:2:0
 D.V..S zerocodec            ZeroCodec Lossless Video
 DEVI.S zlib                 LCL (LossLess Codec Library) ZLIB
 DEV..S zmbv                 Zip Motion Blocks Video
 ..AIL. 4gv                  4GV (Fourth Generation Vocoder)
 D.AIL. 8svx_exp             8SVX exponential
 D.AIL. 8svx_fib             8SVX fibonacci
 DEAIL. aac                  AAC (Advanced Audio Coding) (decoders: aac aac_fixed )
 D.AIL. aac_latm             AAC LATM (Advanced Audio Coding LATM syntax)
 DEAIL. ac3                  ATSC A/52A (AC-3) (decoders: ac3 ac3_fixed ) (encoders: ac3 ac3_fixed )
 D.AIL. acelp.kelvin         Sipro ACELP.KELVIN
 D.AIL. adpcm_4xm            ADPCM 4X Movie
 DEAIL. adpcm_adx            SEGA CRI ADX ADPCM
 D.AIL. adpcm_afc            ADPCM Nintendo Gamecube AFC
 D.AIL. adpcm_agm            ADPCM AmuseGraphics Movie AGM
 D.AIL. adpcm_aica           ADPCM Yamaha AICA
 DEAIL. adpcm_argo           ADPCM Argonaut Games
 D.AIL. adpcm_ct             ADPCM Creative Technology
 D.AIL. adpcm_dtk            ADPCM Nintendo Gamecube DTK
 D.AIL. adpcm_ea             ADPCM Electronic Arts
 D.AIL. adpcm_ea_maxis_xa    ADPCM Electronic Arts Maxis CDROM XA
 D.AIL. adpcm_ea_r1          ADPCM Electronic Arts R1
 D.AIL. adpcm_ea_r2          ADPCM Electronic Arts R2
 D.AIL. adpcm_ea_r3          ADPCM Electronic Arts R3
 D.AIL. adpcm_ea_xas         ADPCM Electronic Arts XAS
 DEAIL. adpcm_g722           G.722 ADPCM (decoders: g722 ) (encoders: g722 )
 DEAIL. adpcm_g726           G.726 ADPCM (decoders: g726 ) (encoders: g726 )
 DEAIL. adpcm_g726le         G.726 ADPCM little-endian (decoders: g726le ) (encoders: g726le )
 DEAIL. adpcm_ima_alp        ADPCM IMA High Voltage Software ALP
 DEAIL. adpcm_ima_amv        ADPCM IMA AMV
 D.AIL. adpcm_ima_apc        ADPCM IMA CRYO APC
 DEAIL. adpcm_ima_apm        ADPCM IMA Ubisoft APM
 D.AIL. adpcm_ima_cunning    ADPCM IMA Cunning Developments
 D.AIL. adpcm_ima_dat4       ADPCM IMA Eurocom DAT4
 D.AIL. adpcm_ima_dk3        ADPCM IMA Duck DK3
 D.AIL. adpcm_ima_dk4        ADPCM IMA Duck DK4
 D.AIL. adpcm_ima_ea_eacs    ADPCM IMA Electronic Arts EACS
 D.AIL. adpcm_ima_ea_sead    ADPCM IMA Electronic Arts SEAD
 D.AIL. adpcm_ima_iss        ADPCM IMA Funcom ISS
 D.AIL. adpcm_ima_moflex     ADPCM IMA MobiClip MOFLEX
 D.AIL. adpcm_ima_mtf        ADPCM IMA Capcom's MT Framework
 D.AIL. adpcm_ima_oki        ADPCM IMA Dialogic OKI
 DEAIL. adpcm_ima_qt         ADPCM IMA QuickTime
 D.AIL. adpcm_ima_rad        ADPCM IMA Radical
 D.AIL. adpcm_ima_smjpeg     ADPCM IMA Loki SDL MJPEG
 DEAIL. adpcm_ima_ssi        ADPCM IMA Simon & Schuster Interactive
 DEAIL. adpcm_ima_wav        ADPCM IMA WAV
 D.AIL. adpcm_ima_ws         ADPCM IMA Westwood
 DEAIL. adpcm_ms             ADPCM Microsoft
 D.AIL. adpcm_mtaf           ADPCM MTAF
 D.AIL. adpcm_psx            ADPCM Playstation
 D.AIL. adpcm_sbpro_2        ADPCM Sound Blaster Pro 2-bit
 D.AIL. adpcm_sbpro_3        ADPCM Sound Blaster Pro 2.6-bit
 D.AIL. adpcm_sbpro_4        ADPCM Sound Blaster Pro 4-bit
 DEAIL. adpcm_swf            ADPCM Shockwave Flash
 D.AIL. adpcm_thp            ADPCM Nintendo THP
 D.AIL. adpcm_thp_le         ADPCM Nintendo THP (Little-Endian)
 D.AIL. adpcm_vima           LucasArts VIMA audio
 D.AIL. adpcm_xa             ADPCM CDROM XA
 DEAIL. adpcm_yamaha         ADPCM Yamaha
 D.AIL. adpcm_zork           ADPCM Zork
 DEAI.S alac                 ALAC (Apple Lossless Audio Codec)
 D.AIL. amr_nb               AMR-NB (Adaptive Multi-Rate NarrowBand) (decoders: amrnb )
 D.AIL. amr_wb               AMR-WB (Adaptive Multi-Rate WideBand) (decoders: amrwb )
 D.AI.S ape                  Monkey's Audio
 DEAIL. aptx                 aptX (Audio Processing Technology for Bluetooth)
 DEAIL. aptx_hd              aptX HD (Audio Processing Technology for Bluetooth)
 D.AIL. atrac1               ATRAC1 (Adaptive TRansform Acoustic Coding)
 D.AIL. atrac3               ATRAC3 (Adaptive TRansform Acoustic Coding 3)
 D.AI.S atrac3al             ATRAC3 AL (Adaptive TRansform Acoustic Coding 3 Advanced Lossless)
 D.AIL. atrac3p              ATRAC3+ (Adaptive TRansform Acoustic Coding 3+) (decoders: atrac3plus )
 D.AI.S atrac3pal            ATRAC3+ AL (Adaptive TRansform Acoustic Coding 3+ Advanced Lossless) (decoders: atrac3plusal )
 D.AIL. atrac9               ATRAC9 (Adaptive TRansform Acoustic Coding 9)
 D.AIL. avc                  On2 Audio for Video Codec (decoders: on2avc )
 D.AIL. binkaudio_dct        Bink Audio (DCT)
 D.AIL. binkaudio_rdft       Bink Audio (RDFT)
 D.AIL. bmv_audio            Discworld II BMV audio
 ..AIL. celt                 Constrained Energy Lapped Transform (CELT)
 DEAIL. codec2               codec2 (very low bitrate speech codec) (decoders: libcodec2 ) (encoders: libcodec2 )
 DEAIL. comfortnoise         RFC 3389 Comfort Noise
 D.AIL. cook                 Cook / Cooker / Gecko (RealAudio G2)
 D.AIL. derf_dpcm            DPCM Xilam DERF
 D.AIL. dolby_e              Dolby E
 D.AIL. dsd_lsbf             DSD (Direct Stream Digital), least significant bit first
 D.AIL. dsd_lsbf_planar      DSD (Direct Stream Digital), least significant bit first, planar
 D.AIL. dsd_msbf             DSD (Direct Stream Digital), most significant bit first
 D.AIL. dsd_msbf_planar      DSD (Direct Stream Digital), most significant bit first, planar
 D.AIL. dsicinaudio          Delphine Software International CIN audio
 D.AIL. dss_sp               Digital Speech Standard - Standard Play mode (DSS SP)
 D.AI.S dst                  DST (Direct Stream Transfer)
 DEAILS dts                  DCA (DTS Coherent Acoustics) (decoders: dca ) (encoders: dca )
 D.AIL. dvaudio              DV audio
 DEAIL. eac3                 ATSC A/52B (AC-3, E-AC-3)
 D.AIL. evrc                 EVRC (Enhanced Variable Rate Codec)
 D.AIL. fastaudio            MobiClip FastAudio
 DEAI.S flac                 FLAC (Free Lossless Audio Codec)
 DEAIL. g723_1               G.723.1
 D.AIL. g729                 G.729
 D.AIL. gremlin_dpcm         DPCM Gremlin
 DEAIL. gsm                  GSM (decoders: gsm libgsm ) (encoders: libgsm )
 DEAIL. gsm_ms               GSM Microsoft variant (decoders: gsm_ms libgsm_ms ) (encoders: libgsm_ms )
 D.AIL. hca                  CRI HCA
 D.AIL. hcom                 HCOM Audio
 D.AIL. iac                  IAC (Indeo Audio Coder)
 D.AIL. ilbc                 iLBC (Internet Low Bitrate Codec)
 D.AIL. imc                  IMC (Intel Music Coder)
 D.AIL. interplay_dpcm       DPCM Interplay
 D.AIL. interplayacm         Interplay ACM
 D.AIL. mace3                MACE (Macintosh Audio Compression/Expansion) 3:1
 D.AIL. mace6                MACE (Macintosh Audio Compression/Expansion) 6:1
 D.AIL. metasound            Voxware MetaSound
 DEAI.S mlp                  MLP (Meridian Lossless Packing)
 D.AIL. mp1                  MP1 (MPEG audio layer 1) (decoders: mp1 mp1float )
 DEAIL. mp2                  MP2 (MPEG audio layer 2) (decoders: mp2 mp2float ) (encoders: mp2 mp2fixed libtwolame )
 DEAIL. mp3                  MP3 (MPEG audio layer 3) (decoders: mp3float mp3 ) (encoders: libmp3lame libshine )
 D.AIL. mp3adu               ADU (Application Data Unit) MP3 (MPEG audio layer 3) (decoders: mp3adufloat mp3adu )
 D.AIL. mp3on4               MP3onMP4 (decoders: mp3on4float mp3on4 )
 D.AI.S mp4als               MPEG-4 Audio Lossless Coding (ALS) (decoders: als )
 ..A.L. mpegh_3d_audio       MPEG-H 3D Audio
 D.AIL. musepack7            Musepack SV7 (decoders: mpc7 )
 D.AIL. musepack8            Musepack SV8 (decoders: mpc8 )
 DEAIL. nellymoser           Nellymoser Asao
 DEAIL. opus                 Opus (Opus Interactive Audio Codec) (decoders: opus libopus ) (encoders: opus libopus )
 D.AIL. paf_audio            Amazing Studio Packed Animation File Audio
 DEAIL. pcm_alaw             PCM A-law / G.711 A-law
 D.AI.S pcm_bluray           PCM signed 16|20|24-bit big-endian for Blu-ray media
 DEAI.S pcm_dvd              PCM signed 20|24-bit big-endian
 D.AI.S pcm_f16le            PCM 16.8 floating point little-endian
 D.AI.S pcm_f24le            PCM 24.0 floating point little-endian
 DEAI.S pcm_f32be            PCM 32-bit floating point big-endian
 DEAI.S pcm_f32le            PCM 32-bit floating point little-endian
 DEAI.S pcm_f64be            PCM 64-bit floating point big-endian
 DEAI.S pcm_f64le            PCM 64-bit floating point little-endian
 D.AI.S pcm_lxf              PCM signed 20-bit little-endian planar
 DEAIL. pcm_mulaw            PCM mu-law / G.711 mu-law
 DEAI.S pcm_s16be            PCM signed 16-bit big-endian
 DEAI.S pcm_s16be_planar     PCM signed 16-bit big-endian planar
 DEAI.S pcm_s16le            PCM signed 16-bit little-endian
 DEAI.S pcm_s16le_planar     PCM signed 16-bit little-endian planar
 DEAI.S pcm_s24be            PCM signed 24-bit big-endian
 DEAI.S pcm_s24daud          PCM D-Cinema audio signed 24-bit
 DEAI.S pcm_s24le            PCM signed 24-bit little-endian
 DEAI.S pcm_s24le_planar     PCM signed 24-bit little-endian planar
 DEAI.S pcm_s32be            PCM signed 32-bit big-endian
 DEAI.S pcm_s32le            PCM signed 32-bit little-endian
 DEAI.S pcm_s32le_planar     PCM signed 32-bit little-endian planar
 DEAI.S pcm_s64be            PCM signed 64-bit big-endian
 DEAI.S pcm_s64le            PCM signed 64-bit little-endian
 DEAI.S pcm_s8               PCM signed 8-bit
 DEAI.S pcm_s8_planar        PCM signed 8-bit planar
 D.AI.S pcm_sga              PCM SGA
 DEAI.S pcm_u16be            PCM unsigned 16-bit big-endian
 DEAI.S pcm_u16le            PCM unsigned 16-bit little-endian
 DEAI.S pcm_u24be            PCM unsigned 24-bit big-endian
 DEAI.S pcm_u24le            PCM unsigned 24-bit little-endian
 DEAI.S pcm_u32be            PCM unsigned 32-bit big-endian
 DEAI.S pcm_u32le            PCM unsigned 32-bit little-endian
 DEAI.S pcm_u8               PCM unsigned 8-bit
 DEAIL. pcm_vidc             PCM Archimedes VIDC
 D.AIL. qcelp                QCELP / PureVoice
 D.AIL. qdm2                 QDesign Music Codec 2
 D.AIL. qdmc                 QDesign Music
 DEAIL. ra_144               RealAudio 1.0 (14.4K) (decoders: real_144 ) (encoders: real_144 )
 D.AIL. ra_288               RealAudio 2.0 (28.8K) (decoders: real_288 )
 D.AI.S ralf                 RealAudio Lossless
 DEAIL. roq_dpcm             DPCM id RoQ
 DEAI.S s302m                SMPTE 302M
 DEAIL. sbc                  SBC (low-complexity subband codec)
 D.AIL. sdx2_dpcm            DPCM Squareroot-Delta-Exact
 D.AI.S shorten              Shorten
 D.AIL. sipr                 RealAudio SIPR / ACELP.NET
 D.AIL. siren                Siren
 D.AIL. smackaudio           Smacker audio (decoders: smackaud )
 ..AIL. smv                  SMV (Selectable Mode Vocoder)
 D.AIL. sol_dpcm             DPCM Sol
 DEAI.. sonic                Sonic
 .EAI.. sonicls              Sonic lossless
 DEAIL. speex                Speex (decoders: libspeex ) (encoders: libspeex )
 D.A..S tak                  TAK (Tom's lossless Audio Kompressor)
 DEA..S truehd               TrueHD
 D.AIL. truespeech           DSP Group TrueSpeech
 DEAI.S tta                  TTA (True Audio)
 D.AIL. twinvq               VQF TwinVQ
 D.AIL. vmdaudio             Sierra VMD audio
 DEAIL. vorbis               Vorbis (decoders: vorbis libvorbis ) (encoders: vorbis libvorbis )
 D.AI.. wavesynth            Wave synthesis pseudo-codec
 DEAILS wavpack              WavPack
 D.AIL. westwood_snd1        Westwood Audio (SND1) (decoders: ws_snd1 )
 D.AI.S wmalossless          Windows Media Audio Lossless
 D.AIL. wmapro               Windows Media Audio 9 Professional
 DEAIL. wmav1                Windows Media Audio 1
 DEAIL. wmav2                Windows Media Audio 2
 D.AIL. wmavoice             Windows Media Audio Voice
 D.AIL. xan_dpcm             DPCM Xan
 D.AIL. xma1                 Xbox Media Audio 1
 D.AIL. xma2                 Xbox Media Audio 2
 ..D... bin_data             binary data
 ..D... dvd_nav_packet       DVD Nav packet
 ..D... epg                  Electronic Program Guide
 ..D... klv                  SMPTE 336M Key-Length-Value (KLV) metadata
 ..D... mpegts               raw MPEG-TS stream
 ..D... otf                  OpenType font
 ..D... scte_35              SCTE 35 Message Queue
 ..D... timed_id3            timed ID3 metadata
 ..D... ttf                  TrueType font
 ..S... arib_caption         ARIB STD-B24 caption
 DES... ass                  ASS (Advanced SSA) subtitle (decoders: ssa ass ) (encoders: ssa ass )
 DES... dvb_subtitle         DVB subtitles (decoders: dvbsub ) (encoders: dvbsub )
 D.S... dvb_teletext         DVB teletext (decoders: libzvbi_teletextdec )
 DES... dvd_subtitle         DVD subtitles (decoders: dvdsub ) (encoders: dvdsub )
 D.S... eia_608              EIA-608 closed captions (decoders: cc_dec )
 D.S... hdmv_pgs_subtitle    HDMV Presentation Graphic Stream subtitles (decoders: pgssub )
 ..S... hdmv_text_subtitle   HDMV Text subtitle
 D.S... jacosub              JACOsub subtitle
 D.S... microdvd             MicroDVD subtitle
 DES... mov_text             MOV text
 D.S... mpl2                 MPL2 subtitle
 D.S... pjs                  PJS (Phoenix Japanimation Society) subtitle
 D.S... realtext             RealText subtitle
 D.S... sami                 SAMI subtitle
 ..S... srt                  SubRip subtitle with embedded timing
 ..S... ssa                  SSA (SubStation Alpha) subtitle
 D.S... stl                  Spruce subtitle format
 DES... subrip               SubRip subtitle (decoders: srt subrip ) (encoders: srt subrip )
 D.S... subviewer            SubViewer subtitle
 D.S... subviewer1           SubViewer v1 subtitle
 DES... text                 raw UTF-8 text
 .ES... ttml                 Timed Text Markup Language
 D.S... vplayer              VPlayer subtitle
 DES... webvtt               WebVTT subtitle
 DES... xsub                 XSUB

```

## File: `remote_util.py`
```
from bs4 import BeautifulSoup

# Load the SVG file
with open('./app/templates/remote.svg', 'r') as file:
    svg_content = file.read()

# Create BeautifulSoup object
soup = BeautifulSoup(svg_content, 'xml')  # 'xml' parser is suitable for SVG

# Find all 'g' tags in the SVG
g_tags = soup.find_all('g')

# Function to find leaf nodes and add onclick attribute
def add_onclick_attr(tag):
    children = tag.find_all('g')
    if "KEY" in tag['id']:
        # This is a leaf node
        tag['onclick'] = f"remote('{tag['id']}')"
    else:
        for child in children:
            add_onclick_attr(child)

# Traverse the 'g' tags to find leaves and add onclick attribute
for g_tag in g_tags:
    add_onclick_attr(g_tag)

# Save the modified SVG to a new file
with open('./app/templates/output.svg', 'w') as output_file:
    output_file.write(str(soup))
```

## File: `README.md`
```

```

## Directory: `app`

### Directory: `static`

#### File: `buttons.json`
```
[
    "KEY_0",
    "KEY_1",
    "KEY_2",
    "KEY_3",
    "KEY_4",
    "KEY_5",
    "KEY_6",
    "KEY_7",
    "KEY_8",
    "KEY_9",
    "KEY_NUMERIC_POUND",
    "KEY_NUMERIC_STAR",
    "KEY_FAVORITES",
    "KEY_OPTION",
    "KEY_LEFT",
    "KEY_RIGHT",
    "KEY_UP",
    "KEY_DOWN",
    "KEY_D",
    "KEY_G",
    "KEY_MENU",
    "KEY_PAGEDOWN",
    "KEY_PAGEUP",
    "KEY_ENTER",
    "KEY_BACK",
    "KEY_EXIT",
    "KEY_PAUSE",
    "KEY_PLAY",
    "KEY_FASTFORWARD",
    "KEY_FASTREVERSE",
    "KEY_RECORD",
    "KEY_RESTART",
    "KEY_FRAMEBACK",
    "KEY_FRAMEFORWARD",
    "KEY_CHANNELDOWN",
    "KEY_CHANNELUP",
    "KEY_ZOOMIN",
    "KEY_PROGRAM",
    "KEY_PVR",
    "KEY_INFO",
    "KEY_LAST",
    "KEY_POWER"
]
```

#### File: `500.css`
```
@import url("https://fonts.googleapis.com/css?family=Fira+Code&display=swap");

* {
    margin: 0;
    padding: 0;
    font-family: "Fira Code", monospace;
}

body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #ecf0f1;
}

.container {
    text-align: center;
    margin: auto;
    padding: 4em;

    img {
        width: 256px;
        height: 225px;
    }

    h1 {
        margin-top: 1rem;
        font-size: 35px;
        text-align: center;

        span {
            font-size: 60px;
        }
    }

    p {
        margin-top: 1rem;
    }

    p.info {
        margin-top: 4em;
        font-size: 12px;

        a {
            text-decoration: none;
            color: rgb(84, 84, 206);
        }
    }
}
```

#### File: `video.js`
```
const create = (video) => {
    // always prefer hls.js over native HLS.
    // this is because some Android versions support native HLS
    // but don't support fMP4s.
    var url = window.location.protocol + '//' + window.location.hostname + ':8888' + '/mystream/index.m3u8';
    if (Hls.isSupported()) {
        const hls = new Hls({
            maxLiveSyncPlaybackRate: 1,
            liveSyncDurationCount: 1, 
            liveMaxLatencyDurationCount: 2.5, 
            liveDurationInfinity: true
        });

        hls.on(Hls.Events.ERROR, (evt, data) => {
            if (data.type === Hls.ErrorTypes.MEDIA_ERROR){
                console.log("hls error");
                hls.recoverMediaError();
            }else if (data.fatal) {
                hls.destroy();
                setTimeout(() => create(video), 2000);
            }
        });

        hls.on(Hls.Events.MEDIA_ATTACHED, () => {
            hls.loadSource(url);
        });

        hls.on(Hls.Events.MANIFEST_PARSED, () => {
            video.play();
        });

        hls.attachMedia(video);

    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        // since it's not possible to detect timeout errors in iOS,
        // wait for the playlist to be available before starting the stream
        fetch(url)
            .then(() => {
                video.src = url;
                video.play();
            });
    }
};

/**
 * Parses the query string from a URL into an object representing the query parameters.
 * If no URL is provided, it uses the query string from the current page's URL.
 *
 * @param {string} [url=window.location.search] - The URL to parse the query string from.
 * @returns {Object} An object representing the query parameters with keys as parameter names and values as parameter values.
 */
const parseQueryString = (url) => {
    const queryString = (url || window.location.search).split("?")[1];
    if (!queryString) return {};

    const paramsArray = queryString.split("&");
    const result = {};

    for (let i = 0; i < paramsArray.length; i++) {
        const param = paramsArray[i].split("=");
        const key = decodeURIComponent(param[0]);
        const value = decodeURIComponent(param[1] || "");

        if (key) {
            if (result[key]) {
                if (Array.isArray(result[key])) {
                    result[key].push(value);
                } else {
                    result[key] = [result[key], value];
                }
            } else {
                result[key] = value;
            }
        }
    }

    return result;
};

/**
 * Parses a string with boolean-like values and returns a boolean.
 * @param {string} str The string to parse
 * @param {boolean} defaultVal The default value
 * @returns {boolean}
 */
const parseBoolString = (str, defaultVal) => {
    const trueValues = ["1", "yes", "true"];
    const falseValues = ["0", "no", "false"];
    str = (str || "").toString();

    if (trueValues.includes(str.toLowerCase())) {
        return true;
    } else if (falseValues.includes(str.toLowerCase())) {
        return false;
    } else {
        return defaultVal;
    }
};

/**
 * Sets video attributes based on query string parameters or default values.
 *
 * @param {HTMLVideoElement} video - The video element on which to set the attributes.
 */
const setVideoAttributes = (video) => {
    let qs = parseQueryString();

    video.controls = parseBoolString(qs["controls"], true);
    video.muted = parseBoolString(qs["muted"], true);
    video.autoplay = parseBoolString(qs["autoplay"], true);
    video.playsInline = parseBoolString(qs["playsinline"], true);
};

/**
 *
 * @param {(video: HTMLVideoElement) => void} callback
 * @param {HTMLElement} container
 * @returns
 */
const initVideoElement = (callback) => {
    return () => {
        const video = document.getElementById('video');;
        setVideoAttributes(video);
        callback(video);
    };
};

window.addEventListener('DOMContentLoaded', initVideoElement(create));


```

#### File: `404.css`
```
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: 'Press Start 2P';
    color: #FFFFFF;
    text-align: center;
}

body {
    background-color: #000000;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='42' height='58' viewBox='0 0 42 58'%3E%3Cg fill='%23dddcdd' fill-opacity='0.23'%3E%3Cpath fill-rule='evenodd' d='M12 18h12v18h6v4H18V22h-6v-4zm-6-2v-4H0V0h36v6h6v36h-6v4h6v12H6v-6H0V16h6zM34 2H2v8h24v24h8V2zM6 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm8 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm8 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm8 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm0 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4zM2 50h32v-8H10V18H2v32zm28-6a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-8a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-8a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-8a2 2 0 1 0 0 4 2 2 0 0 0 0-4z'/%3E%3C/g%3E%3C/svg%3E");
}

section.notFound {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 5%;
    height: 100vh;
}

section.notFound h1 {
    color: red;
    font-size: 100px;
}

section.notFound h2 {
    font-size: 50px;
}

section.notFound h1,
h2,
h3 {
    margin-bottom: 40px;
}

div.text {
    height: 50vh;
}

div.text a {
    text-decoration: none;
    margin-right: 20px;
}

div.text a:hover {
    color: red;
    text-decoration: underline;
}

@media only screen and (max-width: 768px) {
    section.notFound {
        flex-direction: column;
        justify-content: space-around;
    }

    section.notFound div.img img {
        width: 70vw;
        height: auto;
    }

    section.notFound h1 {
        font-size: 50px;
    }

    section.notFound h2 {
        font-size: 25px;
    }

    div.text a:active {
        color: red;
        text-decoration: underline;
    }
}
```

#### File: `style.css`
```
:root {
    --lblue: #03e9f4;
    --white: #f7f8fa;
    --radius: 10px;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

body {
    height: 100vh;
    background: linear-gradient(#141e30, #243b55);
    margin: 0;
    padding: 0;
    color: white;
}

a {
    color: inherit;
    text-decoration: none;
}

.header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px 60px;
}

.header > a {
    font-size: 40px;
    font-weight: bold;
}

.nav {
    display: inline-block;
}

.nav__list {
    list-style: none;
    display: flex;

}

.nav__list-item{
    margin-right: 36px;
    font-size: 20px;
}

.main {
    padding-left: 60px;
}

.player-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
}

.settings-modal {
    color: black;
}


/* Login and Register */

#submit {
    display: block;
    top: 50%;
    left: 50%;
}

.auth-box {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 400px;
    padding: 40px;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, .34);
    border-radius: var(--radius);
}


#video {
    /* TODO: figure out a way of maintaining a 1.77 ratio when we make it responsive */
    width: 960px;
    height: 540px;
    border: 1px solid #ccc;
    background: black;
    object-fit: fill; /* or contain, depending on desired behavior */

}

#status {
    color: green;
}


#remote {
    user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 99;
}

body.disabled {
    overflow: hidden;
}

.settings-modal {
    display: none;
    position: fixed;
    background-color: white; /* Color of the modal */
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5); /* Box shadow for the modal */
    z-index: 1000; /* Ensure it's on top of the overlay */
    /* Add positioning and centering styles */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* Add fixed height and make it scrollable */
    max-height: 80vh; /* Adjust the height as needed */
    overflow-y: auto; /* Enable vertical scrolling */
    z-index: 100;
}


/* Style for the close button */
.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #333; /* Adjust the color as needed */
}


```

#### File: `status.js`
```

const socket = io();
socket.on('stream_status', function (data) {
    const statusDiv = document.getElementById('status');
    statusDiv.textContent = `${data.status}`;
    if (data.status === 'Active') {
        statusDiv.style.color = 'green';
        $('#start_stream_button').prop('disabled', true);
    } else if (data.status === 'Stopped') {
        statusDiv.style.color = 'red';
        $('#start_stream_button').prop('disabled', false);
    } else {
        statusDiv.style.color = 'black';
    }
});

socket.on('status_update', function (data) {
    $('#status').text(data.status);

    if (data.status === 'Active') {
        $('#status').css('color', 'green');
        $('#start_stream_button').prop('disabled', true);
    } else if (data.status === 'Stopped') {
        $('#status').css('color', 'red');
        $('#start_stream_button').prop('disabled', false);
    } else {
        $('#status').css('color', 'black'); // Default color for unknown status
    }
});

```

#### File: `buttons.js`
```
var xhr = new XMLHttpRequest();
var colors_active = new Map();
colors_active.set("#C5C1C1", "#964A4A");
colors_active.set("#B0B0B0", "#858282");
var colors_passive = new Map();
// Extract inverted entries
for (let [key, value] of colors_active.entries()) {
    colors_passive.set(value, key);
}

function remote(button) {
    console.log("The button", button, "has been pressed!");
    xhr.open('POST', '/button', true);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send(`button=${button}`);

    var group = document.getElementById(button);
    if (group) {
        var elements = group.getElementsByTagName('*');
        
        for (let i = 0; i < elements.length; i++) {
            let fillAttribute = elements[i].getAttribute('fill');
            let strokeAttribute = elements[i].getAttribute('stroke');

            if (fillAttribute !== null && colors_active.has(fillAttribute)) {
                elements[i].setAttribute('fill', colors_active.get(fillAttribute));
            }

            if (strokeAttribute !== null && colors_active.has(strokeAttribute)) {
                elements[i].setAttribute('stroke', colors_active.get(strokeAttribute));
            }
        }

        setTimeout(function() {
            for (let i = 0; i < elements.length; i++) {
                let fillAttribute = elements[i].getAttribute('fill');
                let strokeAttribute = elements[i].getAttribute('stroke');

                if (fillAttribute !== null && colors_passive.has(fillAttribute)) {
                    elements[i].setAttribute('fill', colors_passive.get(fillAttribute));
                }

                if (strokeAttribute !== null && colors_passive.has(strokeAttribute)) {
                    elements[i].setAttribute('stroke', colors_passive.get(strokeAttribute));
                }
            }
        }, 200); // Change 200 to the desired delay in milliseconds
    } else {
        console.log("Group not found");
    }
}

function stream(action) {
    var xhr_stream = new XMLHttpRequest(); // Renamed to avoid conflict
    xhr_stream.open('POST', '/stream-control', true);
    xhr_stream.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr_stream.send(`action=${action}`);
}

```

### End of Directory `static`

### File: `__init__.py`
```
from flask import Flask, render_template
from flask_mail import Mail
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_moment import Moment
from flask_socketio import SocketIO
from flask_bootstrap import Bootstrap
from config import config

db = SQLAlchemy()
moment = Moment()
socketio = SocketIO()
mail = Mail()
bootstrap = Bootstrap()

login_manager = LoginManager()
login_manager.login_view = 'auth.login'

def create_app(config_name):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    config[config_name].init_app(app)

    db.init_app(app)
    login_manager.init_app(app)
    moment.init_app(app)
    socketio.init_app(app)
    mail.init_app(app)
    bootstrap.init_app(app)

    if app.config['SSL_REDIRECT']:
        from flask_sslify import SSLify
        sslify = SSLify(app)

    from .main import main as main_blueprint
    app.register_blueprint(main_blueprint)

    from .auth import auth as auth_blueprint
    app.register_blueprint(auth_blueprint, url_prefix='/auth')
    
    from .api import api as api_blueprint
    app.register_blueprint(api_blueprint, url_prefix='/api')

    return app

```

### Directory: `auth`

#### File: `__init__.py`
```
from flask import Blueprint

auth = Blueprint('auth', __name__)

from . import views
```

#### File: `views.py`
```
from flask import render_template, flash, request, redirect, url_for
from . import auth
from .. import db
from ..email import send_email
from .forms import LoginForm, RegistrationForm
from flask_login import login_user, logout_user, login_required, current_user
from ..models import User


# TODO: Uncomment this to prevent unconfirmed users to access the app
# @auth.before_app_request
# def before_request():
#     if current_user.is_authenticated:
#         current_user.ping()
#         if not current_user.confirmed \
#                 and request.endpoint \
#                 and request.blueprint != 'auth' \
#                 and request.endpoint != 'static' \
#                 and request.endpoint == 'main.player':
#             return redirect(url_for('auth.unconfirmed'))

@auth.route('/unconfirmed')
def unconfirmed():
    if current_user.is_anonymous or current_user.confirmed:
        return redirect(url_for('main.index'))
    return render_template('auth/unconfirmed.html')

@auth.route('/confirm')
@login_required
def resend_confirmation():
    token = current_user.generate_confirmation_token()
    send_email(current_user.email, 'Confirm Your Account',
               'auth/email/confirm', user=current_user, token=token)
    flash('A new confirmation email has been sent to you by email.')
    return redirect(url_for('main.index'))

@auth.route('/confirm/<token>')
@login_required
def confirm(token):
    if current_user.confirmed:
        return redirect(url_for('main.index'))
    if current_user.confirm(token):
        db.session.commit()
        flash('You have confirmed your account. Thanks!')
    else:
        flash('The confirmation link is invalid or has expired.')
    return redirect(url_for('main.index'))

@auth.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            next = request.args.get('next')
            if next is None or not next.startswith('/'):
                next = url_for('main.index')
            return redirect(next)
        flash('Invalid username or password.', 'form-error')
    return render_template('auth/login.html', form=form)


@auth.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(email=form.email.data,
                    username=form.username.data,
                    password=form.password.data)
        db.session.add(user)
        db.session.commit()
        # Create a token and send an email to the user
        token = user.generate_confirmation_token()
        send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token)
        flash('A confirmation email has been sent to you by email.', 'confirmation-pending')
        return redirect(url_for('main.index'))
        # flash('You can now login.', 'register-success')
        # return redirect(url_for('auth.login'))
    return render_template('auth/register.html', form=form)

@auth.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'logout-message')
    return redirect(url_for('main.index'))

@auth.route('/change-password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            db.session.add(current_user)
            db.session.commit()
            flash('Your password has been updated.')
            return redirect(url_for('main.index'))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)
```

#### File: `forms.py`
```
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField, ValidationError
from wtforms.validators import DataRequired, Length, Email, Regexp, EqualTo
from ..models import User


class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField('Keep me logged in')
    submit = SubmitField('Log In')

class RegistrationForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Length(1, 64), Email()])
    username = StringField('Username', validators=[
        DataRequired(), Length(1, 64),
        Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0, 'Usernames must have only letters, numbers, dots or underscores')])
    password = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.')])
    password2 = PasswordField('Confirm password', validators=[DataRequired()])
    submit = SubmitField('Register')

    def validate_email(self, field):
        if User.query.filter_by(email=field.data).first():
            raise ValidationError('Email already registered.')

    def validate_username(self, field):
        if User.query.filter_by(username=field.data).first():
            raise ValidationError('Username already in use.')


class ChangePasswordForm(FlaskForm):
    old_password = PasswordField('Old password', validators=[DataRequired()])
    password = PasswordField('New password', validators=[
        DataRequired(), EqualTo('password2', message='Passwords must match.')])
    password2 = PasswordField('Confirm new password',
                              validators=[DataRequired()])
    submit = SubmitField('Update Password')


class PasswordResetRequestForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Length(1, 64),
                                             Email()])
    submit = SubmitField('Reset Password')


class PasswordResetForm(FlaskForm):
    password = PasswordField('New Password', validators=[
        DataRequired(), EqualTo('password2', message='Passwords must match')])
    password2 = PasswordField('Confirm password', validators=[DataRequired()])
    submit = SubmitField('Reset Password')


class ChangeEmailForm(FlaskForm):
    email = StringField('New Email', validators=[DataRequired(), Length(1, 64),
                                                 Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Update Email Address')

    def validate_email(self, field):
        if User.query.filter_by(email=field.data.lower()).first():
            raise ValidationError('Email already registered.')

```

### End of Directory `auth`

### Directory: `api`

#### File: `users.py`
```
from flask import jsonify, request, current_app, url_for
from . import api
from ..models import User

@api.route('/users/<int:id>')
def get_user(id):
    user = User.query.get_or_404(id)
    return jsonify(user.to_json())
```

#### File: `__init__.py`
```
from flask import Blueprint

api = Blueprint('api', __name__)

from . import users 
```

#### File: `stream.py`
```
# TODO: implement the API for stream control
```

### End of Directory `api`

### Directory: `templates`

#### File: `webrtc.html`
```
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width">
<style>
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    overflow: hidden;
}
#video {
    width: 100%;
    height: 100%;
    background: black;
}
</style>
</head>
<body>

<script>

const restartPause = 2000;

const unquoteCredential = (v) => (
    JSON.parse(`"${v}"`)
);

const linkToIceServers = (links) => (
    (links !== null) ? links.split(', ').map((link) => {
        const m = link.match(/^<(.+?)>; rel="ice-server"(; username="(.*?)"; credential="(.*?)"; credential-type="password")?/i);
        const ret = {
            urls: [m[1]],
        };

        if (m[3] !== undefined) {
            ret.username = unquoteCredential(m[3]);
            ret.credential = unquoteCredential(m[4]);
            ret.credentialType = "password";
        }

        return ret;
    }) : []
);

const parseOffer = (offer) => {
    const ret = {
        iceUfrag: '',
        icePwd: '',
        medias: [],
    };

    for (const line of offer.split('\r\n')) {
        if (line.startsWith('m=')) {
            ret.medias.push(line.slice('m='.length));
        } else if (ret.iceUfrag === '' && line.startsWith('a=ice-ufrag:')) {
            ret.iceUfrag = line.slice('a=ice-ufrag:'.length);
        } else if (ret.icePwd === '' && line.startsWith('a=ice-pwd:')) {
            ret.icePwd = line.slice('a=ice-pwd:'.length);
        }
    }

    return ret;
};

const setAudioBitrate = (section, bitrate) => {
    let opusPayloadFormat = '';
    let lines = section.split('\r\n');

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('a=rtpmap:') && lines[i].toLowerCase().includes('opus/')) {
            opusPayloadFormat = lines[i].slice('a=rtpmap:'.length).split(' ')[0];
            break;
        }
    }

    if (opusPayloadFormat === '') {
        return section;
    }

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('a=fmtp:' + opusPayloadFormat + ' ') && !lines[i].includes(`maxaveragebitrate=${bitrate}`)) {
            if (lines[i].includes('maxaveragebitrate=')) {
                lines[i] = lines[i].replace(/maxaveragebitrate=\d+/i, `maxaveragebitrate=${bitrate}`);
            } else {
                lines[i] += `;maxaveragebitrate=${bitrate}`;
            }
        }
    }

    return lines.join('\r\n');
};


const enableStereoOpus = (section) => {
    let opusPayloadFormat = '';
    let lines = section.split('\r\n');

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('a=rtpmap:') && lines[i].toLowerCase().includes('opus/')) {
            opusPayloadFormat = lines[i].slice('a=rtpmap:'.length).split(' ')[0];
            break;
        }
    }

    if (opusPayloadFormat === '') {
        return section;
    }

    for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('a=fmtp:' + opusPayloadFormat + ' ')) {
            if (!lines[i].includes('stereo')) {
                lines[i] += ';stereo=1';
            }
            if (!lines[i].includes('sprop-stereo')) {
                lines[i] += ';sprop-stereo=1';
            }
        }
    }

    return lines.join('\r\n');
};

const editOffer = (offer) => {
    const sections = offer.sdp.split('m=');

    for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        if (section.startsWith('audio')) {
            sections[i] = setAudioBitrate(section, 120000);
;
        }
    }

    offer.sdp = sections.join('m=');
};

const generateSdpFragment = (offerData, candidates) => {
    const candidatesByMedia = {};
    for (const candidate of candidates) {
        const mid = candidate.sdpMLineIndex;
        if (candidatesByMedia[mid] === undefined) {
            candidatesByMedia[mid] = [];
        }
        candidatesByMedia[mid].push(candidate);
    }

    let frag = 'a=ice-ufrag:' + offerData.iceUfrag + '\r\n'
        + 'a=ice-pwd:' + offerData.icePwd + '\r\n';

    let mid = 0;

    for (const media of offerData.medias) {
        if (candidatesByMedia[mid] !== undefined) {
            frag += 'm=' + media + '\r\n'
                + 'a=mid:' + mid + '\r\n';

            for (const candidate of candidatesByMedia[mid]) {
                frag += 'a=' + candidate.candidate + '\r\n';
            }
        }
        mid++;
    }

    return frag;
}

class WHEPClient {
    constructor(video) {
        this.video = video;
        this.pc = null;
        this.restartTimeout = null;
        this.serverURL = window.location.protocol + '//' + window.location.hostname + ':8889' + '/mystream/';
        this.sessionUrl = '';
        this.queuedCandidates = [];
        this.start();
    }

    start() {
        console.log("requesting ICE servers");

        fetch(new URL('whep', this.serverURL) + window.location.search, {
            method: 'OPTIONS',
        })
            .then((res) => this.onIceServers(res))
            .catch((err) => {
                console.log('error: ' + err);
                this.scheduleRestart();
            });
    }

    onIceServers(res) {
        this.pc = new RTCPeerConnection({
            iceServers: linkToIceServers(res.headers.get('Link')),
        });

        const direction = "sendrecv";
        this.pc.addTransceiver("video", { direction });
        this.pc.addTransceiver("audio", { direction });

        this.pc.onicecandidate = (evt) => this.onLocalCandidate(evt);
        this.pc.oniceconnectionstatechange = () => this.onConnectionState();

        this.pc.ontrack = (evt) => {
            console.log("new track:", evt.track.kind);
            this.video.srcObject = evt.streams[0];
        };

        this.pc.createOffer()
            .then((offer) => this.onLocalOffer(offer));
    }

    onLocalOffer(offer) {
        editOffer(offer);

        this.offerData = parseOffer(offer.sdp);
        this.pc.setLocalDescription(offer);

        console.log("sending offer");

        fetch(new URL('whep', this.serverURL) + window.location.search, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/sdp',
            },
            body: offer.sdp,
        })
            .then((res) => {
                if (res.status !== 201) {
                    throw new Error('bad status code');
                }
                this.sessionUrl = new URL(res.headers.get('location'), this.serverURL).toString();
                return res.text();
            })
            .then((sdp) => this.onRemoteAnswer(new RTCSessionDescription({
                type: 'answer',
                sdp,
            })))
            .catch((err) => {
                console.log('error: ' + err);
                this.scheduleRestart();
            });
    }

    onConnectionState() {
        if (this.restartTimeout !== null) {
            return;
        }

        console.log("peer connection state:", this.pc.iceConnectionState);

        switch (this.pc.iceConnectionState) {
        case "disconnected":
            this.scheduleRestart();
        }
    }

    onRemoteAnswer(answer) {
        if (this.restartTimeout !== null) {
            return;
        }

        this.pc.setRemoteDescription(answer);

        if (this.queuedCandidates.length !== 0) {
            this.sendLocalCandidates(this.queuedCandidates);
            this.queuedCandidates = [];
        }
    }

    onLocalCandidate(evt) {
        if (this.restartTimeout !== null) {
            return;
        }

        if (evt.candidate !== null) {
            if (this.sessionUrl === '') {
                this.queuedCandidates.push(evt.candidate);
            } else {
                this.sendLocalCandidates([evt.candidate])
            }
        }
    }

    sendLocalCandidates(candidates) {
        fetch(this.sessionUrl + window.location.search, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/trickle-ice-sdpfrag',
                'If-Match': '*',
            },
            body: generateSdpFragment(this.offerData, candidates),
        })
            .then((res) => {
                if (res.status !== 204) {
                    throw new Error('bad status code');
                }
            })
            .catch((err) => {
                console.log('error: ' + err);
                this.scheduleRestart();
            });
    }

    scheduleRestart() {
        if (this.restartTimeout !== null) {
            return;
        }

        if (this.pc !== null) {
            this.pc.close();
            this.pc = null;
        }

        this.restartTimeout = window.setTimeout(() => {
            this.restartTimeout = null;
            this.start();
        }, restartPause);

        if (this.sessionUrl) {
            fetch(this.sessionUrl, {
                method: 'DELETE',
            })
                .then((res) => {
                    if (res.status !== 200) {
                        throw new Error('bad status code');
                    }
                })
                .catch((err) => {
                    console.log('delete session error: ' + err);
                });
        }
        this.sessionUrl = '';

        this.queuedCandidates = [];
    }
}

/**
 * Parses the query string from a URL into an object representing the query parameters.
 * If no URL is provided, it uses the query string from the current page's URL.
 *
 * @param {string} [url=window.location.search] - The URL to parse the query string from.
 * @returns {Object} An object representing the query parameters with keys as parameter names and values as parameter values.
 */
 const parseQueryString = (url) => {
    const queryString = (url || window.location.search).split("?")[1];
    if (!queryString) return {};

    const paramsArray = queryString.split("&");
    const result = {};

    for (let i = 0; i < paramsArray.length; i++) {
        const param = paramsArray[i].split("=");
        const key = decodeURIComponent(param[0]);
        const value = decodeURIComponent(param[1] || "");

        if (key) {
            if (result[key]) {
                if (Array.isArray(result[key])) {
                    result[key].push(value);
                } else {
                    result[key] = [result[key], value];
                }
            } else {
                result[key] = value;
            }
        }
    }

    return result;
};

/**
 * Parses a string with boolean-like values and returns a boolean.
 * @param {string} str The string to parse
 * @param {boolean} defaultVal The default value
 * @returns {boolean}
 */
const parseBoolString = (str, defaultVal) => {
    const trueValues = ["1", "yes", "true"];
    const falseValues = ["0", "no", "false"];
    str = (str || "").toString();

    if (trueValues.includes(str.toLowerCase())) {
        return true;
    } else if (falseValues.includes(str.toLowerCase())) {
        return false;
    } else {
        return defaultVal;
    }
};

/**
 * Sets video attributes based on query string parameters or default values.
 *
 * @param {HTMLVideoElement} video - The video element on which to set the attributes.
 */
const setVideoAttributes = (video) => {
    let qs = parseQueryString();

    video.controls = parseBoolString(qs["controls"], true);
    video.muted = parseBoolString(qs["muted"], true);
    video.autoplay = parseBoolString(qs["autoplay"], true);
    video.playsInline = parseBoolString(qs["playsinline"], true);
};

/**
 *
 * @param {(video: HTMLVideoElement) => void} callback
 * @param {HTMLElement} container
 * @returns
 */
const initVideoElement = (callback, container) => {
    return () => {
        const video = document.createElement("video");
        video.id = "video";

        setVideoAttributes(video);
        container.append(video);
        callback(video);
    };
};

window.addEventListener('DOMContentLoaded', initVideoElement((video) => new WHEPClient(video), document.body));

</script>

</body>
</html>
```

#### File: `user.html`
```
{% extends "base.html" %}

{% block title %}PlayerApp - {{ user.username }}{% endblock %}

{% block body %}
<div>
    <div class="profile-header">
        <h1>{{ user.username }}</h1>
        <p>
            {% if user.name %}{{ user.name }}<br>{% endif %}
        </p>
        <p>Member since {{ moment(user.member_since).format('L') }}. Last seen {{ moment(user.last_seen).fromNow() }}.</p>
        <p>
            {% if user == current_user %}
            <a class="btn btn-default" href="{{ url_for('.edit_profile') }}">Edit Profile</a>
            {% else %}
            <a class="btn btn-default" href="{{ url_for('.chat')}}"> Chat </a>
            {% endif %}
            {% if current_user.is_administrator() %}
            <a class="btn btn-danger" href="{{ url_for('.edit_profile_admin', id=user.id) }}">Edit Profile [Admin]</a>
            {% endif %}
    </div>
</div>
{% endblock %}
```

#### File: `500.html`
```
<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href='/static/500.css' />
    </head>
    <body>
        <div class="container">
            <img src="https://i.imgur.com/qIufhof.png" />

            <h1>
            <span>500</span> <br />
            Internal server error
            </h1>
            <p>We are currently trying to fix the problem.</p>
            <p class="info">
            Illustration taken from
            <a href="https://www.kapwing.com/404-illustrations" target="_blank"
                >kapwing.com</a
            >
            </p>
        </div>
    </body>
</html>

```

#### Directory: `auth`

##### Directory: `email`

###### File: `confirm.txt`
```
Dear {{ user.username }},

Welcome to PlayerApp!

To confirm your account please click on the following link: 

{{ url_for('auth.confirm', token=token, _externam=True) }}

Sincerely,

The PlayerApp Team

Note: replies to this email address are not monitored. 
```

###### File: `confirm.html`
```
<p>Dear {{ user.username }},</p>
<p>Welcome to <b>Flasky</b>!</p>
<p>To confirm your account please <a href="{{ url_for('auth.confirm', token=token, _external=True) }}">click here</a>.</p>
<p>Alternatively, you can paste the following link in your browser's address bar:</p>
<p>{{ url_for('auth.confirm', token=token, _external=True) }}</p>
<p>Sincerely,</p>
<p>The Flasky Team</p>
<p><small>Note: replies to this email address are not monitored.</small></p>
```

##### End of Directory `email`

##### File: `unconfirmed.html`
```
{% extends "base.html" %}

{% block title %}Confirm your account{% endblock %}

{% block body %}
<div class="page-header">
    <h1>
        Hello, {{ current_user.username }}!
    </h1>
    <h3>You have not confirmed your account yet.</h3>
    <p>
        Before you can access this site you need to confirm your account.
        Check your inbox, you should have received an email with a confirmation link.
    </p>
    <p>
        Need another confirmation email?
        <a href="{{ url_for('auth.resend_confirmation') }}">Click here</a>
    </p>
</div>
{% endblock %}
```

##### File: `register.html`
```
{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    <style>
    </style>
{% endblock %}
{% block body %}
    <div class="auth-box">
        <h2>Register</h2>
        <form method="POST">
            <form method="POST">
                {{ form.hidden_tag() }}
                <div class="user-box">
                    {{ form.email() }}
                    {{ form.email.label }} 
                </div>
                <div class="user-box">
                    {{ form.username() }}
                    {{ form.username.label }} 
                </div>
                <div class="user-box">
                    {{ form.password() }}
                    {{ form.password.label }} 
                </div>
                <div class="user-box">
                    {{ form.password2() }}
                    {{ form.password2.label }} 
                </div>
                {{ form.submit() }}
            </form>

        </form>
    </div>
{% endblock %}
```

##### File: `login.html`
```
{% extends "base.html" %}
{% block title %}Login{% endblock %}
{% block body %}
<div class="auth-box">
    <h2>Login Here</h2>
    <form method="POST">
        {{ form.hidden_tag() }}
        <div class="user-box">
            {{ form.email() }}
            {{ form.email.label }}
        </div>
        <div class="user-box">
            {{ form.password() }}
            {{ form.password.label }}
        </div>
        {{ form.remember_me() }} {{ form.remember_me.label }}
        {{ form.submit() }}
    </form>
    <p>
        New user?
        <a href="{{ url_for('auth.register') }}">
            Click here to register
        </a>
    </p>
</div>
{% endblock %}
```

##### File: `change_password.html`
```
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{% block title %}Flasky - Change Password{% endblock %}

{% block page_content %}
<div class="page-header">
    <h1>Change Your Password</h1>
</div>
<div class="col-md-4">
    <!-- TODO: add the form for changing passwords. It should have 'password', 'password2' (confirm password), and 'submit' -->
</div>
{% endblock %}
```

#### End of Directory `auth`

#### File: `index.html`
```
{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block body %}
<h2>TV Streaming</h2>
<p>This is a web application for streaming the TV signal from my home.</p>
<p>I'm using an Odroid computer as a server, and a Capture card to get the video signal from my set-up box. I also
    created a remote control using an IR LED, and the GPIO connectors of the Odroid computer. I hope that you enjoy
    watching!</p>
<a href="/player">Start Watching</a>
{% endblock %}
```

#### File: `404.html`
```
<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href='/static/404.css' />
    </head>
    <body>
        <section class="notFound">
            <div class="img">
            <img src="https://assets.codepen.io/5647096/backToTheHomepage.png" alt="Back to the Homepage"/>
            <img src="https://assets.codepen.io/5647096/Delorean.png" alt="El Delorean, El Doc y Marti McFly"/>
            </div>
            <div class="text">
            <h1>404</h1>
            <h2>PAGE NOT FOUND</h2>
            <h3>BACK TO HOME?</h3>
            <a href="/" class="yes">YES</a>
            <a href="https://youtu.be/G3AfIvJBcGo?t=12">NO</a>
            </div>
        </section>
    </body>
</html>
```

#### File: `player.html`
```
{% extends "base.html" %}
{% block title %}Player{% endblock %}
{% block head %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script src="/static/buttons.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{{ moment.include_moment() }}
{% endblock %}
{% block body %}
<div id="player" class="player-container">
    <div class="video-player">
        <video id="video"></video>
        <div id="stream-control">
            <button id="start_stream_button" onclick="stream('start')">Start stream</button>
            <button id="stop_stream_button" onclick="stream('stop')">Stop stream</button>
            <button id="restart_stream_button" onclick="stream('restart')">Restart stream</button>
            <button id="show_settings_button">Show Settings</button>
        </div>
    </div>
    <div id="remote">
        {% include 'remote.svg' %}
    </div>
</div>
<div class="settings-modal" id="settingsModal">
    <h1>Settings</h1>
    <button id="closeSettingsButton" class="close-button"><i class="fas fa-times"></i></button>
    <form id="settingsForm" method="POST">
        {{ form.hidden_tag() }}
        {% import "bootstrap/wtf.html" as wtf %}
        {{ wtf.quick_form(form) }}
    </form>
</div>
<script src="/static/video.js"></script>
<script>
    const settingsModal = document.getElementById('settingsModal');
    const showSettingsButton = document.getElementById('show_settings_button')
    const closeSettingsButton = document.getElementById('closeSettingsButton');
    const overlay = document.createElement('div'); // Create an overlay element

    showSettingsButton.addEventListener('click', function () {
        settingsModal.style.display = 'block';
        document.body.classList.add('disabled'); // Disable scrolling
        if (!document.querySelector('.overlay')) {
            overlay.classList.add('overlay');
            document.body.appendChild(overlay); // Append the overlay to the body
        }

        // Close settings modal when clicking outside the modal
        overlay.addEventListener('click', function (event) {
            if (event.target === overlay) {
                settingsModal.style.display = 'none';
                document.body.classList.remove('disabled'); // Re-enable scrolling
                overlay.remove(); // Remove the overlay
            }
        });
    });

    closeSettingsButton.addEventListener('click', function () {
        settingsModal.style.display = 'none';
        document.body.classList.remove('disabled'); // Re-enable scrolling
        if (overlay.parentNode === document.body) {
            overlay.remove(); // Remove the overlay
        }
    });
</script>

{% endblock %}
```

#### File: `base.html`
```
<!DOCTYPE html>
<html lang="en">

    <head>
        {% block head %}
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="/static/status.js"></script>
        <link rel="stylesheet" href='/static/style.css' />
        <title>{% block title %}{% endblock %} - PlayerApp</title>
        {% endblock %}
    </head>

    <body>
        <!-- navbar of the application -->
        <header class="header">
            <a class="header__link" href="{{ url_for('main.index') }}">PlayerApp</a>
            <div>
                <nav class="nav">
                    <ul class="nav__list">
                        <li class="nav__list-item">Status: <span id="status"></span></li>
                        <li class="nav__list-item"><a href="{{ url_for('main.player') }}">Video Player</a></li>
                        {% if current_user.is_authenticated %}
                        <li class="nav__list-item"><a href="{{ url_for('auth.logout') }}">Log Out</a></li>
                        {% else %}
                        <li class="nav__list-item"><a href="{{ url_for('auth.login') }}">Log In</a></li>
                        {% endif %}
                    </ul>
                </nav>
            </div>
        </header>

        <!-- Doing it with a button to close the alert message -->
        <!-- <div class="container">
        {% for message in get_flashed_messages() %}
            TODO: add nice css to change how the warnings are presented
            <div class="alert alert-warning">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                {{ message }}
            </div>
        {% endfor %}
    </div> -->

        <!-- Creating a list with the alert messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
        <ul class=flashes>
            {% for category, message in messages %}
            <li class="{{ category }}">{{ message }}</li>
            {% endfor %}
        </ul>
        {% endif %}
        {% endwith %}
        <main class="main">
            {% block body %}
            {% endblock %}
        </main>
    </body>

</html>
```

### End of Directory `templates`

### File: `models.py`
```
from flask_login import UserMixin
from flask import current_app, request, url_for
from . import db, login_manager
from werkzeug.security import generate_password_hash, check_password_hash
import hashlib
from datetime import datetime
from itsdangerous import TimedSerializer as Serializer


class StreamSettings(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    hls_errors_per_hour = db.Column(db.Integer)

    framerate = db.Column(db.Integer)
    audio_delay = db.Column(db.Float)
    resolution = db.Column(db.String(10))  
    video_bitrate = db.Column(db.Integer)
    audio_bitrate = db.Column(db.Integer)
    preset = db.Column(db.String(10))  
    thread_queue_size = db.Column(db.Integer)
    audio_codec = db.Column(db.String(10)) 
    video_codec = db.Column(db.String(10)) 
    tune = db.Column(db.String(12)) 
    bitrate = db.Column(db.Integer)
    vbr = db.Column(db.String(12)) 
    compression_level = db.Column(db.Integer)
    application = db.Column(db.String(10))
    apply_phase_inv = db.Column(db.String(1))
    sample_fmt = db.Column(db.String(5)) 
    writeQueueSize = db.Column(db.Integer)
    udpMaxPayloadSize = db.Column(db.Integer)
    hlsVariant = db.Column(db.String(20)) 
    hlsSegmentCount = db.Column(db.Integer)
    hlsSegmentDuration = db.Column(db.String(20))  
    hlsPartDuration = db.Column(db.String(20))  
    hlsSegmentMaxSize = db.Column(db.String(20))  


class Permission:
    WATCH = 1
    STREAM_CONTROL = 2
    ADMIN = 4


class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    default = db.Column(db.Boolean, default=False, index=True)
    permissions = db.Column(db.Integer)
    users = db.relationship('User', backref='role', lazy='dynamic')

    def __init__(self, **kwargs):
        super(Role, self).__init__(**kwargs)
        if self.permissions is None:
            self.permissions = 0

    @staticmethod
    def insert_roles():
        roles = {
            'Watcher': [Permission.WATCH],
            'User': [Permission.WATCH, Permission.STREAM_CONTROL],
            'Administrator': [Permission.WATCH, Permission.STREAM_CONTROL, Permission.ADMIN],
        }
        default_role = 'Watcher'
        for r in roles:
            role = Role.query.filter_by(name=r).first()
            if role is None:
                role = Role(name=r)
            role.reset_permissions()
            for perm in roles[r]:
                role.add_permission(perm)
            role.default = (role.name == default_role)
            db.session.add(role)
        db.session.commit()

    def add_permission(self, perm):
        if not self.has_permission(perm):
            self.permissions += perm

    def remove_permission(self, perm):
        if self.has_permission(perm):
            self.permissions -= perm

    def reset_permissions(self):
        self.permissions = 0

    def has_permission(self, perm):
        return self.permissions & perm == perm

    def __repr__(self):
        return '<Role %r>' % self.name


class User(UserMixin, db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(64), unique=True, index=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    member_since = db.Column(db.DateTime(), default=datetime.utcnow)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))
    password_hash = db.Column(db.String(128))
    confirmed = db.Column(db.Boolean, default=False)
    name = db.Column(db.String(64))
    last_seen = db.Column(db.DateTime(), default=datetime.utcnow)
    avatar_hash = db.Column(db.String(32))

    def __init__(self, **kwargs):
        super(User, self).__init__(**kwargs)
        if self.role is None:
            if self.email == current_app.config['ADMIN_EMAIL']:
                self.role = Role.query.filter_by(name='Administrator').first()
            else:
                self.role = Role.query.filter_by(default=True).first()
        if self.email is not None and self.avatar_hash is None:
            self.avatar_hash = self.gravatar_hash()

    @property
    def password(self):
        raise AttributeError('password is not a readable attribute')

    @password.setter
    def password(self, password):
        self.password_hash = generate_password_hash(password)

    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)

    def generate_confirmation_token(self):
        s = Serializer(current_app.config['SECRET_KEY'])
        return s.dumps({'confirm': self.id})

    def confirm(self, token, expiration=3600):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token, max_age=expiration)
        except:
            return False
        if data.get('confirm') != self.id:
            return False
        self.confirmed = True
        db.session.add(self)
        return True

    def generate_reset_token(self):
        s = Serializer(current_app.config['SECRET_KEY'])
        return s.dumps({'reset': self.id})

    @staticmethod
    def reset_password(token, new_password, expiration=3600):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token, max_age=expiration)
        except:
            return False
        user = User.query.get(data.get('reset'))
        if user is None:
            return False
        user.password = new_password
        db.session.add(user)
        return True

    def generate_email_change_token(self, new_email):
        s = Serializer(current_app.config['SECRET_KEY'])
        return s.dumps(
            {'change_email': self.id, 'new_email': new_email})

    def change_email(self, token, expiration=3600):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token, max_age=expiration)
        except:
            return False
        if data.get('change_email') != self.id:
            return False
        new_email = data.get('new_email')
        if new_email is None:
            return False
        if self.query.filter_by(email=new_email).first() is not None:
            return False
        self.email = new_email
        self.avatar_hash = self.gravatar_hash()
        db.session.add(self)
        return True

    def ping(self):
        self.last_seen = datetime.utcnow()
        db.session.add(self)
    
    def to_json(self):
        json_user = {
            'url': url_for('api.get_user', id=self.id),
            'email': self.email,
            'username': self.username,
            'member_since': self.member_since,
            'last_seen': self.last_seen,
        }
        return json_user
    
    def generate_auth_token(self):
        s = Serializer(current_app.config['SECRET_KEY'])
        return s.dumps({'id': self.id})

    def gravatar_hash(self):
        return hashlib.md5(self.email.lower().encode('utf-8')).hexdigest()

    @staticmethod
    def verify_auth_token(token, expiration):
        s = Serializer(current_app.config['SECRET_KEY'])
        try:
            data = s.loads(token, max_age=expiration)
        except:
            return None
        return User.query.get(data['id'])

    def __repr__(self):
        return '<User %r>' % self.username


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
```

### Directory: `main`

#### File: `__init__.py`
```
from flask import Blueprint

main = Blueprint('main', __name__)

from . import views, errors
```

#### File: `views.py`
```
from flask import render_template, session, url_for, request, session, flash, jsonify, current_app
from flask_login import logout_user, login_required, current_user
from datetime import datetime
from ..models import User, Permission, Role
from .forms import StreamSettingsForm
from . import main
from .. import db
from .. import moment
from .. import socketio 
import subprocess
import psutil
import signal
import json
import os


buttons = set(json.load(open('./app/static/buttons.json')))
# Initialize the FFmpeg process so that it can be closed later
STREAM_ACTIVE = "Active"
STREAM_STOPPED = "Stopped"

# TODO: store the stream status in the database? or in a file
stream_status = {'pid': None, 'status': STREAM_STOPPED}

def get_stream_status():
    if stream_status['pid'] is None:
        return STREAM_STOPPED
    return psutil.pid_exists(stream_status['pid'])

def restart_modules():
    # This commands can change if you use another OS
    sudo_command = '/usr/bin/sudo'
    sh_command = '/usr/bin/sh'
    modprobe_command = '/usr/sbin/modprobe'
    echo_command = '/usr/bin/echo'
    # reload the required modules before starting the stream. This is to avoid problems with ffmpeg (I think it is because of the capture card that I'm using)
    command = f"{sudo_command} {sh_command} -c '{modprobe_command} -v -r uvcvideo && {modprobe_command} -v uvcvideo'"
    password = os.getenv('ODROID_PASSWORD')
    os.system('{} {} | {} -S {}'.format(echo_command, password, sudo_command, command))

def start_stream(video_source, audio_source, framerate=30, audio_delay=0.3, resolution='640x480', video_bitrate='1000K', audio_bitrate='48K', preset="ultrafast", tune='zerolatency', sample_fmt="s16p", thread_queue_size=4096, vbr="on"):
    # restart_modules()
    itsoffset = [] 
    if audio_delay != 0:
        itsoffset = ['-itsoffset', str(audio_delay)]
    # start the stream using ffmpeg
    # TODO: figure out if mediamtx allos for upd input streams
    udp = ['-f',  'mpegts', 'udp://localhost:1234/mypath']
    rtsp = ['-f', 'rtsp', 'rtsp://localhost:8554/mystream?pkt_size=1028']

    # TODO: make the parameters of the command accessable through the frontend
    command = [
        '/usr/bin/ffmpeg', '-re',
        '-f', 'v4l2', '-thread_queue_size', str(thread_queue_size), '-framerate', str(framerate),  '-s', resolution, '-c:v', 'mjpeg', '-i', video_source,
        '-f', 'alsa', '-thread_queue_size', str(thread_queue_size),  *itsoffset, '-i', audio_source,
        # TODO: try to fix the audio issue in webrtc, I don't think it is because of this command, but somehting to do with mediamtx
        '-b:a', str(audio_bitrate), '-c:a', 'libopus', "-bufsize", "128M", "-vbr", str(vbr), "-ac", "1", "-sample_fmt", sample_fmt, "-payload_type", "111",
        '-b:v', str(video_bitrate), '-c:v', 'libx264', "-g", "25", '-flush_packets', '0',
        '-r', str(framerate), '-preset', preset, '-tune', tune,
        *rtsp
    ]
    print(" ".join(command))
    ffmpeg_process = subprocess.Popen(command, close_fds=True)
    stream_status['status'] = STREAM_ACTIVE
    

def stop_stream():
    def find_pid_by_name(process_name):
        pids = []
        for process in psutil.process_iter(['pid', 'name']):
            if process.info['name'] == process_name:
                pids.append(process.info['pid'])
        return pids
    pids = find_pid_by_name("ffmpeg")
    if pids:
        for pid in pids:
            os.kill(pid, signal.SIGTERM)
    stream_status['status'] = STREAM_STOPPED
    # restart_modules()

def restart_stream(video_source, audio_source):
    stop_stream()
    start_stream(video_source, audio_source)

@main.route('/')
def index():
    return render_template('index.html')

@main.route('/webrtc')
def webrtc():
    return render_template('webrtc.html')

@main.route('/player', methods=['GET', 'POST'])
@login_required
def player():
    form = StreamSettingsForm()
    if form.validate_on_submit():
        print(form.data)
    return render_template('player.html', form=form)

@main.route('/set-settings', methods=['POST'])
@login_required
def set_settings():
    print(request.form)
    # TODO: stop the ffmpeg stream 
    # TODO: set the settings for HLS and mediamtx
    # TODO: set the settings for ffmpeg and start ffmpeg
    return "Hello world!"

# TODO: create a route that sets the stream settings to the default settings. Store the default settings in a file
    

@main.route('/button', methods=['POST'])
def button_pressed():
    button = request.form.get('button')
    remote = 'my_remote'
    remote2 = 'sony_fisionn'
    if button in buttons:
        print(button)
        command = ['/usr/bin/irsend', 'SEND_ONCE', remote, button, '-d', '/var/run/lirc/lirc1']
        button_press = subprocess.Popen(command)
        print(command, button_press.stdout)
    else:
        flash("The button is not valid")
    return ""

# TODO: implement the functionality of checking if the user has permission for contorlling the stream
@main.route('/stream-control', methods=['POST'])
def stream_control():
    action = request.form.get('action')
    video_source = current_app.config['VIDEO_SOURCE']
    audio_source = current_app.config['AUDIO_SOURCE']
    if action == "start":
        start_stream(video_source, audio_source)
    elif action == "stop":
        # stop the stream
        stop_stream()
    elif action == "restart":
        restart_stream(video_source, audio_source)
    else:
        flash("The action is not valid!")
    socketio.emit('status_update', {'status': stream_status['status']})
    return ""

@main.route('/hls-errors', methods=['POST'])
def hls_error_log():
    # TODO: log the error, the time, and the ffmpeg configuration, as well as the hls configurations to see which one gives bettter results. log it in an csv file. 
    pass


# TODO: implement this function so that it returns a page containing information about the user
@main.route('/user/<username>')
def user(username):
    user = User.query.filter_by(username=username).first_or_404()
    return render_template('user.html', user=user)

@socketio.on('connect')
def handle_connect():
    # Emit the initial status when a client connects
    socketio.emit('stream_status', {'status': stream_status['status']})
```

#### File: `errors.py`
```
from flask import render_template
from . import main

@main.app_errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@main.app_errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500
```

#### File: `forms.py`
```
from flask_wtf import FlaskForm
from wtforms import StringField, DecimalField, BooleanField, SubmitField, ValidationError, SelectField, IntegerField, IntegerRangeField
from wtforms.validators import DataRequired, Length, Email, Regexp, EqualTo, AnyOf, NumberRange

class StreamSettingsForm(FlaskForm):
    # TODO: change the default values to a function that gets the current settings
    framerate = IntegerField(label="Frame Rate", default=30) # an integer
    audio_delay = DecimalField(label="Audio Delay", places=1, default=0.3) # a float
    # TODO: implement a function that gets the resolutions available from the device using ffmpeg with ffmpeg  -hide_banner -f v4l2 -list_formats all -i /dev/video0
    resolution = SelectField(label="Resolution", choices=[(x, x) for x in ['1920x1080', '1600x1200', '1360x768', '1280x1024', '1280x960', '1280x720', '1024x768', '800x600', '720x576', '720x480', '640x480']], default='640x480')
    video_bitrate = IntegerRangeField("Video Bitrate (Kbps)", validators=[NumberRange(min=10_000, max=2_000_000)], default=90_000) # must be '50K' or '2M' something like that maybe a slider
    audio_bitrate = IntegerRangeField("Audio Bitrate (Kbps)", validators=[NumberRange(min=10_000, max=2_000_000)], default=7_000) # must be '50K' or '2M' something like that maybe a slider
    preset = SelectField(label="Preset", choices=[(x, x) for x in ['ultrafast', 'superfast', 'veryfast', 'faster', 'fast', 'medium', 'slow', 'slower', 'veryslow', 'placebo']], default='ultrafast') 
    thread_queue_size = IntegerField(label="Thread Queue Size", validators=[AnyOf(values=[2**x for x in range(0, 14)], message="It must be a power of 2")], default=2048)     
    audio_codec = SelectField(label="Audio Codec", choices=[('aac', 'AAC'), ('g722', "G722"), ('g726le', 'G726'), ('libcodec2', 'Codec2'), ('libgsm', 'GSM') , ('libopus', 'Opus (libopus)'), ('opus', "Opus (opus)"), ('libvorbis', 'Vorvis')], default='libopus')
    video_codec = SelectField(label="Video Codec", choices=[('libaom-av1', 'AV1'), ('libx264', 'H.264'), ('mjpeg', 'MJPEG'), ('libvpx-vp9', 'VP9')], default='libx264')
    tune = SelectField(label="Tune", choices=['film', 'animation', 'grain', 'stillimage', 'fastdecode', 'zerolatency', 'psnr', 'ssim'], default='zerolatency') 
    # TODO: only show bitrate, vbr, and compression level when libopus is selected in audio_codec
    bitrate = IntegerField(label='Bitrate (bits/s)', default=1000) # maybe it works with libopus
    vbr = SelectField(label='Variable Bit Rate', choices=[('off', 'off'), ('on', 'on'), ('constrained', 'constrained')], default='off')
    compression_level = IntegerRangeField(label='Compression Level (0 is fast but low quality, 10 is high quality but slow)', validators=[NumberRange(min=0, max=10)], default=0)
    application = SelectField(label='Application', choices=[(x, x) for x in ['voip', 'audio', 'lowdelay']], default='lowdelay')
    apply_phase_inv = SelectField(label='Apply Phase Inversion', choices=[('1', 'Phase Inversion Enabled'), ('0', 'Phase Inversion Disabled')], default='0')
    sample_fmt = SelectField(label='Sample Format', choices=[(x, x) for x in ['u8', 's16', 's32', 'flt', 'dbl', 'u8p', 's16p', 's32p', 'fltp', 'dblp', 's64', 's64p']], default='s16')

    # Hls Settings
    # Size of the queue of outgoing packets. A higher value allows to increase throughput, a lower value allows to save RAM.
    writeQueueSize = IntegerField(label="Write Queue Size", validators=[AnyOf(values=[2**x for x in range(0, 14)], message="It must be a power of 2")], default=2048) 
    # Maximum size of outgoing UDP packets. This can be decreased to avoid fragmentation on networks with a low UDP MTU.
    udpMaxPayloadSize = IntegerField(label="UDP Max Payload Size", default=1472) 
    # Variant of the HLS protocol to use. Available options are:
    # * mpegts - uses MPEG-TS segments, for maximum compatibility.
    # * fmp4 - uses fragmented MP4 segments, more efficient.
    # * lowLatency - uses Low-Latency HLS.
    hlsVariant = SelectField(label="HLS Variant", choices=[(x, x) for x in ['lowLatency', 'mpegts', 'fmp4']], default='lowLatency') 
    # Number of HLS segments to keep on the server.
    # Segments allow to seek through the stream.
    # Their number doesn't influence latency.
    hlsSegmentCount = IntegerField(label="HLS Segment Count", default=7) 
    # Minimum duration of each segment.
    # A player usually puts 3 segments in a buffer before reproducing the stream.
    # The final segment duration is also influenced by the interval between IDR frames,
    # since the server changes the duration in order to include at least one IDR frame
    # in each segment.
    hlsSegmentDuration = StringField(label="HLS Segment Duration", default="1s")
    # Minimum duration of each part.
    # A player usually puts 3 parts in a buffer before reproducing the stream.
    # Parts are used in Low-Latency HLS in place of segments.
    # Part duration is influenced by the distance between video/audio samples
    # and is adjusted in order to produce segments with a similar duration.
    hlsPartDuration = StringField(label="HLS Part Duration", default="600ms")
    # Maximum size of each segment.
    # This prevents RAM exhaustion.
    hlsSegmentMaxSize = StringField(label="HLS Segment Max Size", default="50M")
    submit = SubmitField('Restart Stream')
```

### End of Directory `main`

### File: `email.py`
```
from threading import Thread
from flask import current_app, render_template
from flask_mail import Message
from . import mail


def send_async_email(app, msg):
    with app.app_context():
        mail.send(msg)


def send_email(to, subject, template, **kwargs):
    app = current_app._get_current_object()
    msg = Message(app.config['MAIL_SUBJECT_PREFIX'] + ' ' + subject,
                  sender=app.config['MAIL_SENDER'], recipients=[to])
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    thr = Thread(target=send_async_email, args=[app, msg])
    thr.start()
    return thr
```

## End of Directory `app`

## File: `sony_fisionn.lircd.conf`
```

# Please take the time to finish this file as described in
# https://sourceforge.net/p/lirc-remotes/wiki/Checklist/
# and make it available to others by sending it to
# <lirc@bartelmus.de>
#
# This config file was automatically generated
# using lirc-0.10.1(default) on Mon Nov 27 01:11:45 2023
# Command line used: -f --device /dev/lirc0 lircd.conf
# Kernel version (uname -r): 4.9.337-31
#
# Remote name (as of config file): sony_fisionn
# Brand of remote device, the thing you hold in your hand:
# Remote device model nr:
# Remote device info url:
# Does remote device has a bundled capture device e. g., a
#     usb dongle? :
# For bundled USB devices: usb vendor id, product id
#     and device string (use dmesg or lsusb):
# Type of device controlled
#     (TV, VCR, Audio, DVD, Satellite, Cable, HTPC, ...) :
# Device(s) controlled by this remote:

begin remote

  name  sony_fisionn
  flags RAW_CODES
  eps            30
  aeps          100

  gap          16777215

      begin raw_codes

          name KEY_ENTER
              394   27966     396  451204     392   27634
              396  431503     393   27967     395  431241
              392   27639     392   27635     395  403522
              394   27968     393  431249     394   27635
              396  411568     394   27968     395

          name KEY_CHANNELUP
              392     304      97     349      98     680
               98     512     100     511      97     350
               98     349      98     349      98     350
               98     349      97     681      98     514
               97     680      99     349      97     681
               98     350      97     350      97   17750
              395     304      97     351      96     682
               98    1128      93  469230     391   27473
              394  431743     393   27140     393  432071
              392   27472     395  411718     392   27141
              394   27142     393  404547     392   27472
              395  431738     393   27140     395  432077
              394   27472     391  451760     394   27140
              394  392094     394   27478     388  431652
              395   27139     396  452105     393   27474
              393  411666     391   27142     393

          name KEY_CHANNELDOWN
              392   27634     395  471581     392   27303
              394  451993     394   27636     394  451502
              394   27304     394  431875     395   27635
              395  431602     392   27305     393  431928
              395   27638     392  411575     392   27305
              394  431917     394   27636     394  451500
              393   27303     395   27305     394  424302
              394   27635     396  431527     394   27305
              393  431927     392   27635     396  411518
              393   27303     396  431908     394   27637
              394  451638     393   27306     392

      end raw_codes

end remote

```

## Directory: `tests`

### File: `test_basic.py`
```
import unittest
from flask import current_app
from app import create_app, db

class BasicsTestCase(unittest.TestCase):
    def setUp(self):
        self.app = create_app('testing')
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def test_app_exists(self):
        self.assertFalse(current_app is None)

    def test_app_is_testing(self):
        self.assertTrue(current_app.config['TESTING'])
```

### File: `__init__.py`
```

```

### File: `test_user_model.py`
```
import unittest
from app.models import User
class UserModelTestCase(unittest.TestCase):
    def test_password_setter(self):
        u = User(password='cat')
        self.assertTrue(u.password_hash is not None)
    
    def test_no_password_getter(self):
        u = User(password='cat')
        with self.assertRaises(AttributeError):
            u.password
        
    def test_password_verification(self):
        u = User(password='cat')
        self.assertTrue(u.verify_password('cat'))
        self.assertFalse(u.verify_password('dog'))

    def test_password_salts_are_random(self):
        u = User(password='cat')
        u2 = User(password='cat')
        self.assertTrue(u.password_hash != u2.password_hash)

```

## End of Directory `tests`

## File: `requirements.txt`
```
alembic==1.9.4
click==8.1.3
dnspython==2.3.0
email-validator==1.3.1
Flask==2.2.3
Flask-Login==0.6.2
Flask-Migrate==4.0.4
Flask-SQLAlchemy==3.0.3
Flask-WTF==1.1.1
greenlet==2.0.2
gunicorn==20.1.0
idna==3.4
itsdangerous==2.1.2
Jinja2==3.1.2
Mako==1.2.4
MarkupSafe==2.1.2
psutil==5.9.4
psycopg2==2.9.5
SQLAlchemy==2.0.4
typing_extensions==4.5.0
Werkzeug==2.2.3
WTForms==3.0.1

```

## File: `playerApp.py`
```
import os
from app import create_app, db
from app.models import User
from flask_migrate import Migrate

app = create_app(os.getenv('FLASK_CONFIG') or 'default')
migrate = Migrate(app, db)

@app.shell_context_processor
def make_shell_context():
    return dict(db=db, User=User)

@app.cli.command()
def test():
    """Run the unit tests."""
    import unittest
    tests = unittest.TestLoader().discover('tests')
    unittest.TextTestRunner(verbosity=2).run(tests)
```

## File: `.gitignore`
```
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
```

## File: `config.py`
```
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'This string is an extreamly hard to guess')
    VIDEO_SOURCE = os.environ.get('VIDEO_SOURCE', "/dev/video0")
    AUDIO_SOURCE = os.environ.get('AUDIO_SOURCE', "hw:CARD=MS2109,DEV=0")
    ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', "example@gmail.com")
    MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp-relay.sendinblue.com')
    MAIL_PORT = int(os.environ.get('MAIL_PORT', '587'))
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    MAIL_SUBJECT_PREFIX = '[PlayerApp]'
    MAIL_SENDER = 'PlayerApp Admin <example@gmail.com>'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SSL_REDIRECT = False

    @staticmethod
    def init_app(app):
        pass


# TODO: create a database for dev and for test in postgres
class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL')

class TestingConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL')

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')


config = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}

```

# End of Directory ``

